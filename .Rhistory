options(tinytex.verbose = TRUE)
tinytex::reinstall_tinytex()
tinytex::install_tinytex()
options(tinytex.verbose = TRUE)
tinytex::reinstall_tinytex()
options(tinytex.verbose = TRUE)
options(tinytex.verbose = TRUE)
options(tinytex.verbose = TRUE)
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
install.packages(c("gstat", "RPostgres"))
#install.packages("RPostgres")
require(RPostgres)
conn <- dbConnect(RPostgres::Postgres(), dbname = 'advanced_gis',
host = 'localhost', # i.e. 'your computer'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = '0531')
options(digits = 10)
prop <- dbFetch(dbSendQuery(conn, "select *
from lab_3.oc_prop"))
plot(prop$long, prop$lat)
summary(prop)
prop$y <- as.numeric(prop$lat)
prop$x <- as.numeric(prop$long)
prop_oc <- subset(prop, (y > 38.2 & y < 38.5) &
(x > -75.3 & x < -75.0))
names(prop_oc)
prop_sub <- subset(prop_oc, year=="2005")
plot(prop_sub$x,prop_sub$y)
head(prop_sub, n=10)
#install.packages("gstat")
#install.packages("sp")
require(gstat)
require(sp)
coordinates(prop_sub) = ~x+y
prop_sub$prsqft <- as.numeric(prop_sub$prsqft)
bubble <- bubble(prop_sub, zcol="prsqft", fill=T, do.sqrt=F, maxsize=3, add=T)
bubble
prop_cor <- variogram(prsqft ~1, data = prop_sub)
plot(prop_cor)
prop_cor
plot <- plot(prop_cor, prop_cor_fit,
main="Variogram:\nDistance Threshold for Spatial Effect on Real-Estate Sales")
prop_cor_fit <- fit.variogram(prop_cor, vgm(c("Sph","Exp","Mat")))
prop_cor_fit
prop_cor_fit$range[2]
prop_cor_fit$range
plot <- plot(prop_cor, prop_cor_fit,
main="Variogram:\nDistance Threshold for Spatial Effect on Real-Estate Sales")
plot
range_mi <- prop_cor_fit$range[2]*69
range_mi
grid <- as.data.frame(spsample(prop_sub, "regular", n=5000))
plot(grid)
coordinates(grid) <- c("x1","x2")
gridded(grid) <- T
fullgrid(grid) <- T
plot(grid)
proj4string(grid) <- proj4string(prop_sub)
pr_sq_ft_idw <- gstat::idw(prsqft~1, prop_sub, newdata=grid,
idp=2.0)
#install.packages("raster")
require(raster)
raster <- raster(pr_sq_ft_idw)
plot(raster)
points(prop_sub$x,prop_sub$y)
prop_xy <- prop_oc[,c("x","y")]
prop_oc$samp_pr05 <- extract(raster, prop_xy)
head(prop_oc, n=20)
dbWriteTable(conn,
Id(schema = "lab_3",
table = "property_value"),
prop_oc, overwrite = T)
install.packages(c("rgdal", "spatstat"))
require(RPostgres)
conn <- dbConnect(RPostgres::Postgres(), dbname = 'advanced_gis',
host = 'localhost', # i.e. 'your computer'
port = 5432, # or any other port specified by your DBA
user = 'postgres',
password = '0531')
oc_prop_SLOSH <- dbFetch(dbSendQuery(conn, "SELECT c1_high, c2_high, c3_high, c4_high
FROM lab_4.oc_slosh_clipped"))
oc_sale_data <- dbFetch(dbSendQuery(conn, "SELECT * FROM lab_3.oc_prop"))
head(oc_prop_SLOSH)
oc_prop_SLOSH[oc_prop_SLOSH == 99.9] <- 0
head(oc_prop_SLOSH)
head(oc_sale_data)
library(foreign)
setwd("F:/GitHub/hmda_slosh")
setwd("F:/GitHub/hmda_slosh")
data <- read.dta("hmda_slosh_cleaned.dta")
library(haven)
install.packages("haven")
library(haven)
setwd("F:/GitHub/hmda_slosh")
data <- read_dta("hmda_slosh_cleaned.dta")
data <- read_dta("hmda_slosh_cleaned")
data <- read_dta(hmda_slosh_cleaned)
install.packages("lifecycle")
install.packages("lifecycle")
library(haven)
library(lifecycle)
setwd("F:/GitHub/hmda_slosh")
data <- read_dta(hmda_slosh_cleaned)
data <- read_dta(hmda_slosh_cleaned.dta)
data <- read_dta('hmda_slosh_cleaned.dta')
gc()
gc()
data <- read_dta('hmda_slosh_cleaned.dta')
